BJETIVOS

1. Identificar y eliminar la redirecci√≥n incondicional al subdominio `doctor`.
2. Implementar una l√≥gica de redirecci√≥n por rol correctamente diferenciada.
3. Asegurar que el bot√≥n de acceso de emergencia solo est√© disponible cuando sea necesario.
4. Garantizar que la sesi√≥n se valide correctamente antes de redirigir.
5. Prevenir condiciones por defecto inseguras o inconsistentes.

---

## üìÅ ARCHIVOS A EDITAR

- `/auth/Login.jsx` (o donde se maneje el login)
- `/context/AuthContext.jsx`
- `/routes/RouteGuard.jsx` y `/routes/RoleProtectedRoute.jsx`
- Cualquier archivo que tenga l√≥gica global de `useEffect` con `window.location`
- Archivo donde se haya implementado `Acceso de emergencia`

---

## üß† 1. L√ìGICA DE REDIRECCI√ìN POR ROL (MEJORADA)

En el login, despu√©s de validar al usuario, reemplaza cualquier redirecci√≥n incondicional como esta:
```js
window.location.replace("https://doctor.tudominio.com");
```

Por este esquema seguro:
```js
switch(user.role) {
  case 'medico':
    window.location.replace("https://doctor.tudominio.com");
    break;
  case 'paciente':
    window.location.replace("https://paciente.tudominio.com");
    break;
  case 'admin':
    window.location.replace("https://admin.tudominio.com");
    break;
  case 'laboratorio':
    window.location.replace("https://lab.tudominio.com");
    break;
  default:
    alert("Rol no reconocido. Por favor, contacta al soporte.");
    logout();
    break;
}
```

---

## üõë 2. DETECCI√ìN Y ELIMINACI√ìN DE REDIRECCI√ìN INV√ÅLIDA GLOBAL

Busca dentro de cualquier archivo con `useEffect(() => {...}, [])` que tenga una redirecci√≥n as√≠:
```js
useEffect(() => {
  window.location.replace("https://doctor.tudominio.com");
}, []);
```

üî¥ Esta redirecci√≥n se ejecuta cada vez que se monta el componente, sin importar si el usuario tiene sesi√≥n v√°lida o no. **Debe eliminarse o reemplazarse** por l√≥gica controlada por `AuthContext`.

‚úÖ Reemplaza por:
```js
useEffect(() => {
  if (user && user.role) {
    // redirige solo si hay sesi√≥n y rol v√°lido
    switch(user.role) {
      ...
    }
  }
}, [user]);
```

---

## üîê 3. BOT√ìN DE ACCESO DE EMERGENCIA ‚Äî L√ìGICA DE SEGURIDAD

Verifica si tienes algo como esto activo en producci√≥n:
```js
<button onClick={() => window.location.replace("https://doctor.tudominio.com")}>Acceso de emergencia</button>
```

‚ö†Ô∏è Este bot√≥n deber√≠a **estar oculto por defecto**, y solo mostrarse si hay una condici√≥n real de fallo (ejemplo: fallo en la API de login).

‚úÖ Refactoriza as√≠:
```js
{loginError && (
  <div className="emergency-access">
    <p>¬øNo puedes iniciar sesi√≥n? Prueba acceso de emergencia:</p>
    <button onClick={() => window.location.replace("https://doctor.tudominio.com")}>Acceder como m√©dico (emergencia)</button>
  </div>
)}
```

Y aseg√∫rate de que `loginError` est√© definido como estado controlado:
```js
const [loginError, setLoginError] = useState(false);
```

Y que solo se active si la autenticaci√≥n real falla:
```js
.catch(() => setLoginError(true));
```

---

## üßº 4. LIMPIEZA Y SEGURIDAD DE SESI√ìN

Incluye en `AuthContext.jsx` una funci√≥n visible para desarrollo, pero que no se ejecute en producci√≥n:
```js
window.clearMediConnectSession = () => {
  localStorage.removeItem("mediUser");
  location.reload();
};
```
Pero aseg√∫rate de que **esta funci√≥n solo se exponga en `development`**:
```js
if (process.env.NODE_ENV === 'development') {
  window.clearMediConnectSession = () => {
    localStorage.removeItem("mediUser");
    location.reload();
  };
}
```

---

## ‚úÖ 5. PRUEBAS A REALIZAR LUEGO DE APLICAR ESTE PROMPT

| Escenario | Resultado Esperado |
|----------|----------------------|
| Login como paciente | Redirige a `https://paciente.tudominio.com` |
| Login como m√©dico | Redirige a `https://doctor.tudominio.com` |
| Login como admin | Redirige a `https://admin.tudominio.com` |
| Usuario sin rol v√°lido | Alerta + logout |
| Usuario con fallo de login | Muestra acceso de emergencia |